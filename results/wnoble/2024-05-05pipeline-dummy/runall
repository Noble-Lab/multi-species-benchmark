#!/bin/bash
#$ -S "/bin/bash"
#$ -cwd
#$ -o "job.stdout"
#$ -e "job.stderr"
#$ -l m_mem_free=128.0G
#$ -l h_rt=128:0:0
#$ -q noble-long.q

# This script builds a de novo sequencing benchmark dataset from a given set of MGF files and associated FASTA files, using Tide and Percolator to assign peptdies to MS2 spectra.  The script takes as input the name of a directory where the input files reside.  Within that directory, a subdirectory called 'proteomes' contains the proteome FASTA files.  Each of the remaining subdirectories represents a species and contains MGF files from that species.  It is assumed that a species with directory named 'foo' has a corresponding proteome FASTA called 'proteomes/foo.fasta'.  In addition, the script requires a tab-delimited driver file, in which each row corresponds to a species, and the columns are the PRIDE identifier, species name, precursor mass tolerance (in ppm), and m/z bin size (in units of m/z).

# The script produces as output three directories.  The first directory contains an initial version of the benchmark that allows peptides to appear in more than one species.  The second directory is a mirror image of the first one, but with overlapping peptides eliminated by randomly assigning each shared peptide to a single species.  The third directory is a balanced version of the second one, in which the number of MGF files is randomly downsampled so that each species has approximately the same number of associated spectra.

# In addition, the script produces a series of intermediate output directories, each named after a single species.  These intermediate directories contain the peptide index built by tide-index (in a subdirectory called 'tide-index'), all of the output files produced by tide-search (with names beginning with 'tide-search'), and all of the output files produced by Percolator (with names beginning with 'percolator', plus 'make-pin.pin').  Notably, the files ending in 'log.txt' provide details including the full command line for each command, and 'params.txt' provide listings of all parameters.

source ~/.bashrc
conda activate pyteomics

hostname
date
echo PID=$$

if [[ -e /etc/profile.d/modules.sh ]]; then
  source /etc/profile.d/modules.sh
  module load modules modules-init modules-gs modules-noble
fi

# These three options make it harder to for some part of a script to
# fail without you recognizing it. nounset means that references to an
# unset variable result in an error. This means that you can no longer
# do stuff like this if VAR is potentially unset, because "$VAR" returns
# an error rather than "":
#
# if [ "$VAR" ]; then
#
# fi
#
# To explicitly indicate that you are OK with the variable potentially
# being empty you can instead use ${VAR:-}.

# To avoid errexit for a single command, use "|| true", e.g.,
#    diff foo foobar || true

set -o nounset
set -o pipefail
set -o errexit 
set -o xtrace

# The location of the Crux binary.
CRUX=~/proj/crux/crux-4.2.Darwin.x86_64/bin/crux
if [[ ! -e $CRUX ]]; then
    CRUX=~/proj/crux/crux-4.2.Linux.x86_64/bin/crux
fi

# The location of some of the Python scripts.
PROJ_BIN=~/proj/2021_melih_ms-chimera/bin

# The location of the input MGF and FASTA files.
root=../../../data/dummy-input

# A tab-delimited file specifying the structure of the data.
driver=$root/three-species.txt

# Name of primary output directory.
benchmark1=three-species-overlap
benchmark2=three-species
benchmark3=three-species-balanced

for mgf_dir in $root/{Api,Can,Sac}*; do
    species=`basename $mgf_dir`

    # Create the index.
    index=$species/tide-index
    if [[ ! -e $index ]]; then
        $CRUX tide-index \
            --mods-spec 1M+15.994915,1N+0.984016,1Q+0.984016 \
            --nterm-peptide-mods-spec 1X+42.010565,1X+43.005814,1X-17.026549,1X+25.980265 \
            --max-mods 3 \
            --output-dir $index \
            --peptide-list T \
            $root/proteomes/$species.fasta \
            $index
     fi

    precursor=`grep $species $driver | awk '{print $3}'`
    fragment=`grep $species $driver | awk '{print $4}'`

    # Run the search.
    search_output=$species/tide-search.target.txt
    if [[ ! -e $search_output ]]; then
        $CRUX tide-search \
            --isotope-error 1 \
            --output-dir $species \
            --num-threads 8 \
            --use-tailor-calibration T \
            --precursor-window $precursor \
            --mz-bin-width $fragment \
            $mgf_dir/*.mgf \
            $index
    fi

    # Run the pipeline command.
    percolator_output=$species/percolator.target.peptides.txt
    if [[ ! -e $percolator_output ]]; then
        $CRUX percolator \
            --output-dir $species \
            $search_output
    fi

    # Annotate all the MGFs.
    mkdir -p $benchmark1/$species
    for mgf in $mgf_dir/*.mgf; do
        basename=`basename $mgf`
        annotated=$benchmark1/$species/$basename
        if [[ ! -e $annotated ]]; then
            python3 $PROJ_BIN/annotate_mgf.py \
                0.01 \
                $species/percolator.log.txt \
                $species/percolator.target.psms.txt \
                $mgf \
                > $annotated
        fi

        num_psms=`grep "BEGIN IONS" $annotated | wc -l` || true
        # https://stackoverflow.com/questions/18668556/how-can-i-compare-numbers-in-bash
        if [[ $num_psms -lt 100 ]]; then
            echo "Deleting $basename with $num_psms PSMs."
            rm $annotated
        fi

    done
done
../../../bin/summarize_benchmark.py \
    --data_dir $root \
    --driver_filename $driver \
    --benchmark_dir $benchmark1 \
    --root $benchmark1

# Remove peptide overlap.
$PROJ_BIN/clean-benchmark.py $benchmark1 $benchmark2
../../../bin/summarize_benchmark.py \
    --data_dir $root \
    --driver_filename $driver \
    --benchmark_dir $benchmark1 \
    --root $benchmark2

# Approximately balance size of subsets.
../../../bin/downsample_benchmark.py --num_spectra 22000 \
                                     --root $benchmark3 \
                                     $benchmark2/* 
../../../bin/summarize_benchmark.py \
    --data_dir $root \
    --driver_filename $driver \
    --benchmark_dir $benchmark3 \
    --root $benchmark3

