#!/usr/bin/env python
import sys
import argparse
import matplotlib.pyplot as plt
import spectrum_utils.spectrum
import spectrum_utils.plot
import pyteomics.mgf

USAGE = """USAGE: match_by.py <mgf>+

Given one or more annotated MGFs, compute the proportion of intensity
matched to b- and y-ions in each spectrum. Prints a list of values to
stdout."""

def convert_ptms (peptide):
    "Add brackets around PTMs in a peptide."

    mod_dict = {
        "C+57.021":"C[+57.021]",
        "M+15.995":"M[+15.9949]",
        "+0.984":"[+0.9840]",
        "+42.011":"[+42.011]-",
        "+43.006-17.027":"[+25.980]-",
        "+43.006":"[+43.006]-",
        "-17.027":"[-17.027]-"
    }
    for dn_mod in mod_dict.keys():
        peptide = peptide.replace(dn_mod, mod_dict[dn_mod])

    return peptide

def get_percent_matched(spectrum):
    
    # Extract the peptide sequence.
    peptide = convert_ptms(spectrum['params']['seq'])
    
    # Convert from pyteomics to spectrum_utils format.
    spectrum = spectrum_utils.spectrum.MsmsSpectrum(
        spectrum['params']['title'],
        float(spectrum['params']['pepmass'][0]), 
        int(spectrum['params']['charge'][0]), 
        spectrum['m/z array'], 
        spectrum['intensity array']
    )
    
    # Annotate the spectrum.
    spectrum = (
        spectrum.set_mz_range(min_mz=100, max_mz=1400)
        .remove_precursor_peak(2.0, "Da")
        .filter_intensity(min_intensity=0.05, max_num_peaks=50)
        .scale_intensity("root")
        .annotate_proforma(peptide, 0.05, "Da", ion_types="by")
    )

    # Compute percent matched intensity.
    total_intensity = 0.0
    matched_intensity = 0.0
    for annotation, intensity in zip(spectrum.annotation, spectrum.intensity):
        total_intensity += intensity
        if len(annotation.fragment_annotations) > 0:
            matched_intensity += intensity

    return (peptide, 100 * matched_intensity / total_intensity)

###########################################################################
# MAIN
###########################################################################
def main():
    global USAGE

    # Parse the command line.
    if len(sys.argv) == 1:
        print(USAGE, file=sys.stderr)
        sys.exit(1)

    print(f"MGF index\tpeptide\t% matched")
    for this_mgf in sys.argv[1:]:
        print(f"Reading from {this_mgf}.", file=sys.stderr)
        with pyteomics.mgf.read(this_mgf, use_index=False) as reader:
            for mgf_index, spectrum in enumerate(reader):
                if mgf_index % 1000 == 0 and mgf_index > 0:
                    print(mgf_index, file=sys.stderr)
                peptide, matched = get_percent_matched(spectrum)
                print(f"{mgf_index}\t{peptide}\t{matched:.4f}")

if __name__ == "__main__":
    main()

#############################################################################
# TESTING
#############################################################################
import pytest
import tempfile

# Mass of +1 b1 ion is m(V) + m(proton)
# 99.06841391299 + 1.00727646677 = 100.0757

# Mass of +1 y1 ion is m(K) + m(H2O) + m(proton)
# 128.09496301399997 + (1.00782503207 + 17.00274) + 1.00727646677 = 147.1128
# https://github.com/crux-toolkit/crux-toolkit/blob/master/src/util/mass.h

# Just the y1 and b1 ions, plus one other peak.
bitty_mgf = """BEGIN IONS
TITLE=controllerType=0 controllerNumber=1 scan=2475
PEPMASS=561.798400878906
RTINSECONDS=832.4328
CHARGE=2+
SCANS=2475
SEQ=VVQEQGTHPK
100.0757 10
147.1124878 10
1033.7346191 10
END IONS
"""

my_mgf = """BEGIN IONS
TITLE=controllerType=0 controllerNumber=1 scan=2475
PEPMASS=561.798400878906
RTINSECONDS=832.4328
CHARGE=2+
SCANS=2475
SEQ=VVQEQGTHPK
84.0448303 3936.5886230469 
84.0814972 2155.9631347656 
97.1241684 675.0009765625 
101.0713272 8273.31640625 
106.5969009 551.2675170898 
110.071434 3480.9711914063 
112.0875931 655.4925537109 
117.1025467 787.0622558594 
124.0218506 573.0434570313 
129.1023407 4307.3549804688 
136.0753784 513.6068725586 
147.1124878 2242.1789550781 
171.1489716 17505.900390625 
175.118515 1430.5400390625 
199.1435089 5907.8701171875 
226.154892 1230.7514648438 
228.1339722 1189.3963623047 
230.1139221 730.3195800781 
238.2206421 578.6478271484 
239.6330261 573.1657104492 
241.0816956 1016.6735229492 
244.1650391 8036.1098632813 
327.2015991 2643.5959472656 
329.436676 615.9159545898 
369.1423035 615.8500976563 
381.2232971 1044.3002929688 
445.2155762 714.327331543 
445.7083435 1164.3920898438 
453.7232666 4702.521484375 
454.2202454 5765.0966796875 
454.717926 1017.1290893555 
462.7281799 1381.1580810547 
474.7731628 584.8037719727 
482.273468 749.9706420898 
512.2681274 999.9737548828 
539.2930298 3000.0100097656 
553.2305298 773.0104980469 
560.7866211 1212.0534667969 
561.2929688 10707.52734375 
561.829834 1013.0922241211 
562.2373657 1954.6754150391 
562.3233032 6883.9736328125 
562.7788696 1303.7845458984 
650.3289795 1264.9660644531 
664.2758179 1195.4071044922 
667.3475342 1121.3416748047 
778.3859253 1206.9233398438 
796.3920288 6032.0810546875 
797.3983765 848.6907958984 
802.911499 672.137878418 
906.4327393 937.2236938477 
907.4239502 4685.7861328125 
924.4491577 5191.5551757813 
925.4563599 2268.0749511719 
1033.7346191 725.4644775391 
END IONS
"""

big_mgf = """BEGIN IONS
TITLE=controllerType=0 controllerNumber=1 scan=3919
PEPMASS=828.3374
RTINSECONDS=829.10304
CHARGE=3+
SCANS=3919
SEQ=C+57.021ANFDNQDNNHYNHNHNQAR
120.080719 11572.1962890625 
126.0542755 2370.3344726563 
129.0657501 2044.9259033203 
129.1024933 43609.078125 
130.0859833 4392.8032226563 
133.0430756 21430.109375 
134.0460052 1623.1136474609 
134.3571014 1661.8100585938 
141.0658417 11187.9462890625 
143.1177673 4205.8627929688 
147.1126099 12227.9482421875 
155.081955 3122.3088378906 
156.0751495 2471.1391601563 
158.0921631 3096.1274414063 
159.059082 3108.6096191406 
160.0423584 5466.2817382813 
166.0613556 3596.2768554688 
173.1286163 2503.1989746094 
175.1190186 29479.962890625 
187.053421 12431.7021484375 
197.128067 3531.0043945313 
198.8144684 2500.5632324219 
204.0802002 60947.6171875 
205.0826416 2895.0197753906 
209.1024475 2274.1833496094 
215.0477295 3179.7243652344 
215.1389313 2373.5729980469 
217.099411 2334.8037109375 
221.1032867 4907.732421875 
231.0918884 2550.3801269531 
232.0746613 35466.87109375 
232.0926819 2682.2934570313 
234.1236725 2912.5451660156 
234.1440125 3220.1662597656 
235.0829468 2804.4089355469 
235.118576 5699.9150390625 
240.1328888 2645.8654785156 
244.1643219 4398.8686523438 
246.1563416 2885.3774414063 
246.1818237 5685.9560546875 
252.0352783 4749.6865234375 
252.1090851 4231.6157226563 
258.1438293 3344.3332519531 
264.1316223 2151.8918457031 
265.1194763 2375.50390625 
269.9647522 2243.2495117188 
272.1723938 4688.3969726563 
278.9549866 14398.9169921875 
293.0202026 72426.3671875 
294.0232849 4415.1215820313 
301.0973206 3757.2788085938 
301.1290894 3417.3911132813 
307.1436462 2914.0817871094 
315.1055908 2986.8630371094 
321.973175 3005.6875 
322.1882629 4637.1040039063 
326.2109985 4242.509765625 
329.0914612 3519.642578125 
341.2212219 4194.0405273438 
342.6775208 4358.072265625 
346.1176758 39752.74609375 
347.1153259 2860.2919921875 
361.204834 3413.4431152344 
369.424408 2601.728515625 
373.1828003 2491.3566894531 
374.2190247 3191.2160644531 
407.2020874 5507.3486328125 
436.2102661 3029.4125976563 
458.3108215 4096.7583007813 
477.2482605 2630.7680664063 
477.7477112 3488.9162597656 
486.25177 27840.6015625 
486.7539673 17063.9296875 
488.2554626 19602.951171875 
493.188446 3697.5871582031 
497.2315369 4102.6171875 
498.2348633 12474.97265625 
498.7351379 3147.4943847656 
501.2727051 4246.6489257813 
501.759613 4520.0322265625 
507.2458191 13757.9375 
507.7539368 5358.068359375 
508.2498779 10009.67578125 
508.7616577 6421.6806640625 
509.2671509 4775.1743164063 
511.7874451 3006.6826171875 
530.8244019 3870.6938476563 
547.2650146 3863.4543457031 
553.2879028 3472.123046875 
558.7747803 5909.5034179688 
559.333374 55940.62890625 
559.831665 45981.6640625 
560.329895 15328.4296875 
562.2706299 12898.2451171875 
573.6038208 4616.0395507813 
574.3156128 13018.3408203125 
574.8206787 6702.0522460938 
576.2684326 11813.072265625 
577.2728882 4611.7548828125 
590.2862549 5125.1787109375 
591.8106079 3459.5830078125 
612.8319702 4928.6899414063 
613.3334351 6248.8793945313 
615.303894 3470.744140625 
617.3384399 4245.0209960938 
619.257019 3392.6921386719 
625.3118286 28246.29296875 
627.7966309 3396.4125976563 
628.2873535 3786.4270019531 
630.8609619 4983.4384765625 
633.3009644 4501.0698242188 
633.8052368 3772.0903320313 
637.289978 5028.4599609375 
642.8098755 26474.5390625 
643.3205566 34287.12890625 
643.8296509 6935.9936523438 
644.3084106 3941.6687011719 
645.8048706 14264.4345703125 
657.2851563 4573.13671875 
663.8300171 6586.6469726563 
664.3308716 6893.1552734375 
664.8338623 12172.4208984375 
665.3255615 5612.8295898438 
665.8484497 4076.857421875 
666.3409424 4755.2138671875 
669.62677 3382.4282226563 
671.2980957 3637.1357421875 
673.3809204 3604.2548828125 
676.3327026 3367.3422851563 
684.3362427 30096.595703125 
684.8452759 6829.3403320313 
685.3414917 14748.9248046875 
686.3824463 46942.125 
686.8768311 20247.923828125 
688.3365479 3717.1657714844 
693.8462524 34032.08984375 
694.34729 25970.697265625 
694.852478 26718.916015625 
695.3817139 95409.7421875 
695.8881226 50606.34375 
739.3651123 25211.177734375 
740.3641968 14540.7529296875 
751.3184814 4486.1752929688 
752.3374023 5173.279296875 
759.8445435 17269.103515625 
760.3540649 14276.7236328125 
769.4646606 4763.1840820313 
770.4951782 14862.755859375 
775.3903198 14672.7958984375 
775.8948975 5412.791015625 
777.3864746 6498.3447265625 
798.3931885 6213.6645507813 
799.9018555 20337.849609375 
800.40625 16795.255859375 
800.9025879 4557.7451171875 
808.8363037 4919.3823242188 
812.4553223 19265.46484375 
817.3485107 16490.666015625 
817.8546143 13361.740234375 
819.4555054 4371.369140625 
819.8964844 5990.318359375 
827.4435425 63003.1328125 
827.9180908 13415.205078125 
828.4581909 67681.484375 
828.9199829 23503.46484375 
829.4907227 796634.375 
830.4931641 6209.6181640625 
857.4168091 4280.6586914063 
864.3610229 6136.0141601563 
872.8702393 12404.5673828125 
876.4202271 20951.826171875 
877.4177246 5986.3447265625 
881.3905029 10460.2529296875 
890.4971313 14519.64453125 
895.40625 3952.8701171875 
921.8850708 4558.8427734375 
929.8843384 11768.2763671875 
930.3956909 4458.8154296875 
930.8886719 3861.8701171875 
938.4017944 28068.896484375 
938.8917847 19030.578125 
939.4047241 12538.06640625 
971.4998169 14225.6962890625 
972.5048218 5196.1450195313 
987.4091187 6626.2075195313 
987.9030151 17369.5546875 
988.4105835 12706.6240234375 
990.4609375 23112.98046875 
991.4672852 11614.3857421875 
995.9143677 15726.0439453125 
996.4085693 19100.412109375 
996.9221191 11111.3720703125 
999.4610596 4450.6176757813 
1010.5263062 3823.81640625 
1019.5334473 11162.923828125 
1061.486084 6454.8344726563 
1069.4587402 11873.5576171875 
1069.9439697 20460.396484375 
1070.4589844 14242.9619140625 
1086.4821777 4658.7553710938 
1109.5024414 4248.5732421875 
1109.9498291 5624.9057617188 
1117.9588623 16617.35546875 
1118.4599609 17389.33203125 
1118.9678955 14033.4296875 
1126.4761963 19809.361328125 
1126.9802246 15226.6591796875 
1127.4615479 10790.0048828125 
1127.9754639 5526.3891601563 
1136.5340576 5328.67578125 
1144.5765381 4274.67578125 
1153.5292969 17795.765625 
1154.5319824 14781.583984375 
1290.5905762 10604.5859375 
1925.7901611 4214.3686523438 
END IONS
"""

def test_get_percent_matched():
    global my_peptide, bitty_mgf, my_mgf

    for sample_mgf in [bitty_mgf, my_mgf, big_mgf]:
    
        my_tempfile = tempfile.NamedTemporaryFile(delete=False, mode='w')
        my_tempfile.write(sample_mgf)
        my_tempfile.close()

        # There is just one spectrum in there.
        with pyteomics.mgf.read(my_tempfile.name, use_index=False) as reader:
            for mgf_index, spectrum in enumerate(reader):
                peptide, percent_matched = get_percent_matched(spectrum)
                print(peptide, percent_matched)
                assert(
                    # bitty_mgf
                    ((percent_matched/100.0) == pytest.approx(2/3))
                    or
                    # my_mgf
                    (percent_matched == pytest.approx(34.47222886730851))
                    or
                    # big_mgf
                    (percent_matched == pytest.approx(26.840940309345886))
                )
            
